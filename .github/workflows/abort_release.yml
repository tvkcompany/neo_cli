name: Abort Release

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      release_branch:
        required: true
        type: string
      should_abort_release:
        required: false
        type: boolean
        default: false
      should_abort_version_bump:
        required: false
        type: boolean
        default: false
      should_abort_production:
        required: false
        type: boolean
        default: false
    secrets:
      DISCORD_WEBHOOK_URL:
        required: true
      WORKFLOW_PAT:
        required: true

permissions:
  contents: write

jobs:
  notify-start:
    uses: ./.github/workflows/send_discord_message.yml
    with:
      message: "⚠️ Release process failed. Aborting release `${{ inputs.version }}`..."
    secrets:
      webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}

  abort-release:
    runs-on: ubuntu-latest
    if: inputs.should_abort_release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete GitHub Release and Tag
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Delete the GitHub release if it exists
              try {
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: (await github.rest.repos.getReleaseByTag({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag: '${{ inputs.version }}'
                  })).data.id
                });
                console.log('Deleted GitHub release');
              } catch (e) {
                if (e.status !== 404) throw e;
                console.log('No GitHub release found to delete');
              }

              // Delete the tag if it exists
              const git = require('simple-git')();
              await git.raw(['push', 'origin', ':refs/tags/${{ inputs.version }}']);
              console.log('Deleted git tag');
            } catch (error) {
              console.error('Error during abort:', error);
              core.setFailed(error.message);
            }

  abort-version-bump:
    runs-on: ubuntu-latest
    if: inputs.should_abort_version_bump
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_branch }}

      - name: Revert version changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Find and revert the version bump commit
          COMMIT_SHA=$(git log --grep="Prepared release ${{ inputs.version }}" --format="%H")
          if [ ! -z "$COMMIT_SHA" ]; then
            git revert --no-edit "$COMMIT_SHA"
            git push
            echo "Reverted version bump commit"
          else
            echo "No version bump commit found to revert"
          fi

  abort-production:
    runs-on: ubuntu-latest
    if: inputs.should_abort_production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: production
          fetch-depth: 0

      - name: Reset production branch
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Find the merge commit and reset to its parent
          MERGE_SHA=$(git log --grep="Merge pull request.*from.*${{ inputs.release_branch }}" --format="%H" -n 1)
          if [ ! -z "$MERGE_SHA" ]; then
            PARENT_SHA=$(git rev-parse "$MERGE_SHA^1")
            git reset --hard "$PARENT_SHA"
            git push --force
            echo "Reset production branch to before merge"
          else
            echo "No merge commit found to reset"
          fi

  restore-release-branch:
    needs: [abort-version-bump]
    if: inputs.should_abort_version_bump
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore release branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Check if branch exists
          if ! git ls-remote --heads origin ${{ inputs.release_branch }} | grep -q .; then
            # Recreate the branch from the last known state
            git checkout -b ${{ inputs.release_branch }} origin/development
            git push origin ${{ inputs.release_branch }}
            echo "Restored release branch"
          else
            echo "Release branch still exists, no need to restore"
          fi

  notify-complete:
    needs:
      [
        abort-release,
        abort-version-bump,
        abort-production,
        restore-release-branch,
      ]
    if: always()
    uses: ./.github/workflows/send_discord_message.yml
    with:
      message: |
        ${{ 
          (needs.abort-release.result == 'success' || needs.abort-release.result == 'skipped') &&
          (needs.abort-version-bump.result == 'success' || needs.abort-version-bump.result == 'skipped') &&
          (needs.abort-production.result == 'success' || needs.abort-production.result == 'skipped') &&
          (needs.restore-release-branch.result == 'success' || needs.restore-release-branch.result == 'skipped')
          && '✅ Successfully aborted release `' || '❌ Failed to abort release `'
        }}${{ inputs.version }}`. Please check the logs for details.
    secrets:
      webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
